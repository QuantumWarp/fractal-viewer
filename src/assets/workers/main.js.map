{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./worker/app-workers/app.workers.ts","webpack:///./worker/app-workers/fractal-processers/fractal-processor.ts","webpack:///./worker/app-workers/fractals/burning-ship.ts","webpack:///./worker/app-workers/fractals/mandelbrot-set.ts","webpack:///./worker/app-workers/fractals/shared/fractal-factory.ts","webpack:///./worker/app-workers/fractals/shared/fractal-type.enum.ts","webpack:///./worker/app-workers/messages/process-fractal-done.ts","webpack:///./worker/app-workers/messages/process-fractal-results.ts","webpack:///./worker/app-workers/messages/worker-message.enum.ts","webpack:///./worker/app-workers/shared/computed-point.ts","webpack:///./worker/app-workers/shared/coordinate.ts","webpack:///./worker/app-workers/shared/point.ts","webpack:///./worker/main.worker.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { FractalProcessor } from './fractal-processers/fractal-processor';\r\nimport { ProcessFractalDone } from './messages/process-fractal-done';\r\nimport { ProcessFractalResults } from './messages/process-fractal-results';\r\nimport { ProcessFractalStart } from './messages/process-fractal-start';\r\nimport { WorkerMessageType } from './messages/worker-message.enum';\r\n\r\nexport class AppWorkers {\r\n\r\n  constructor(public workerCtx: any) { }\r\n\r\n  workerBroker($event: any): void {\r\n    const message = $event.data;\r\n\r\n    switch (message.type) {\r\n      case WorkerMessageType.ProcessFractalStart:\r\n        this.startProcessor(message);\r\n        break;\r\n      default:\r\n        console.error('Message not recognized');\r\n    }\r\n  }\r\n\r\n  startProcessor(params: ProcessFractalStart): void {\r\n    const processor = new FractalProcessor(params);\r\n    processor.process((coords) =>\r\n      this.workerCtx.postMessage(new ProcessFractalResults(coords)));\r\n    this.workerCtx.postMessage(new ProcessFractalDone());\r\n  }\r\n}\r\n","import { FractalFactory } from '../fractals/shared/fractal-factory';\r\nimport { Fractal } from '../fractals/shared/fractal.interface';\r\nimport { ProcessFractalStart } from '../messages/process-fractal-start';\r\nimport { ComputedPoint } from '../shared/computed-point';\r\nimport { Point } from '../shared/point';\r\n\r\nexport class FractalProcessor {\r\n  private computedCoords: ComputedPoint[] = [];\r\n  private fractal: Fractal<any>;\r\n\r\n  constructor(\r\n    public params: ProcessFractalStart) {\r\n    this.fractal = FractalFactory.create(params.fractalParams);\r\n  }\r\n\r\n  process(resultCallback: (points: ComputedPoint[]) => void): void {\r\n    let point = this.nextPoint();\r\n    let count = 0;\r\n\r\n    while (point) {\r\n\r\n      const coord = point.toCoordinate(this.params.topLeftCoord, this.params.increment);\r\n      const iterations = this.fractal.calculate(coord);\r\n      this.computedCoords.push(new ComputedPoint(point, iterations));\r\n\r\n      this.checkEmitResults(count, resultCallback);\r\n\r\n      count++;\r\n      point = this.nextPoint(point);\r\n    }\r\n\r\n    this.checkEmitResults(count, resultCallback, true);\r\n  }\r\n\r\n  private checkEmitResults(count: number, resultCallback: (points: ComputedPoint[]) => void, force: boolean = false): void {\r\n    if (force || count % this.params.dimensions.y === 0) {\r\n      resultCallback(this.computedCoords);\r\n      this.computedCoords = [];\r\n    }\r\n  }\r\n\r\n  private nextPoint(point?: Point): Point | undefined {\r\n    const midway = Math.floor(this.params.dimensions.x / 2);\r\n\r\n    if (!point) {\r\n      return new Point(midway, 0);\r\n    }\r\n\r\n    if (point.y !== this.params.dimensions.y - 1) {\r\n      return new Point(point.x, point.y + 1);\r\n    }\r\n\r\n    let newX: number;\r\n    if (point.x >= midway) {\r\n      newX = 2 * midway - point.x - 1;\r\n    } else {\r\n      newX = 2 * midway - point.x;\r\n    }\r\n\r\n    if (newX === -1 || newX === this.params.dimensions.x) {\r\n      return undefined;\r\n    } else {\r\n      return new Point(newX, 0);\r\n    }\r\n\r\n  }\r\n}\r\n","import { Coordinate } from '../shared/coordinate';\r\nimport { BurningShipParams } from './burning-ship-params';\r\nimport { Fractal } from './shared/fractal.interface';\r\n\r\nexport class BurningShip implements Fractal<BurningShipParams> {\r\n\r\n  constructor(public params: BurningShipParams) { }\r\n\r\n  calculate(initialCoord: Coordinate): number | undefined {\r\n    let coord = initialCoord.clone();\r\n    let count = 0;\r\n\r\n    while (count < this.params.maxIterations) {\r\n      coord = this.iterate(coord, initialCoord);\r\n\r\n      if (!this.checkIsBounded(coord)) {\r\n        return count;\r\n      }\r\n\r\n      count++;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private checkIsBounded(coord: Coordinate): boolean {\r\n    // Find the absolute value\r\n    const value = (coord.x * coord.x) + (coord.y * coord.y);\r\n    return value < (this.params.bound * this.params.bound);\r\n  }\r\n\r\n  private iterate(coord: Coordinate, initialCoord: Coordinate): Coordinate {\r\n    const x = Math.abs(coord.x);\r\n    const y = Math.abs(coord.y);\r\n\r\n    // Square the current term\r\n    coord.x = (x * x) - (y * y);\r\n    coord.y = 2 * x * y;\r\n\r\n    // Add the initial value\r\n    coord.x = coord.x + initialCoord.x;\r\n    coord.y = coord.y + initialCoord.y;\r\n\r\n    return coord;\r\n  }\r\n}\r\n","import { Coordinate } from '../shared/coordinate';\r\nimport { MandelbrotSetParams } from './mandelbrot-set-params';\r\nimport { Fractal } from './shared/fractal.interface';\r\n\r\nexport class MandelbrotSet implements Fractal<MandelbrotSetParams> {\r\n\r\n  constructor(public params: MandelbrotSetParams) { }\r\n\r\n  calculate(initialCoord: Coordinate): number | undefined {\r\n    let coord = initialCoord.clone();\r\n    let count = 0;\r\n\r\n    while (count < this.params.maxIterations) {\r\n      coord = this.iterate(coord, initialCoord);\r\n\r\n      if (!this.checkIsBounded(coord)) {\r\n        return count;\r\n      }\r\n\r\n      count++;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private checkIsBounded(coord: Coordinate): boolean {\r\n    // Find the absolute value\r\n    const value = (coord.x * coord.x) + (coord.y * coord.y);\r\n    return value < (this.params.bound * this.params.bound);\r\n  }\r\n\r\n  private iterate(coord: Coordinate, initialCoord: Coordinate): Coordinate {\r\n    const x = coord.x;\r\n    const y = coord.y;\r\n\r\n    // Square the current term\r\n    coord.x = (x * x) - (y * y);\r\n    coord.y = 2 * x * y;\r\n\r\n    // Add the initial value\r\n    coord.x = coord.x + initialCoord.x;\r\n    coord.y = coord.y + initialCoord.y;\r\n\r\n    return coord;\r\n  }\r\n}\r\n","import { BurningShip } from '../burning-ship';\r\nimport { MandelbrotSet } from '../mandelbrot-set';\r\nimport { FractalParams } from './fractal-params.interface';\r\nimport { FractalType } from './fractal-type.enum';\r\n\r\nexport class FractalFactory {\r\n\r\n  static create(params: FractalParams) {\r\n\r\n    switch (params.type) {\r\n      case FractalType.MandelbrotSet:\r\n        return new MandelbrotSet(<any>params);\r\n      case FractalType.BurningShip:\r\n        return new BurningShip(<any>params);\r\n    }\r\n  }\r\n}\r\n","export enum FractalType {\r\n  MandelbrotSet,\r\n  BurningShip,\r\n}\r\n","import { WorkerMessageType } from './worker-message.enum';\r\nimport { WorkerMessage } from './worker-message.interface';\r\n\r\nexport class ProcessFractalDone implements WorkerMessage {\r\n  type = WorkerMessageType.ProcessFractalDone;\r\n}\r\n","import { ComputedPoint } from '../shared/computed-point';\r\nimport { WorkerMessageType } from './worker-message.enum';\r\nimport { WorkerMessage } from './worker-message.interface';\r\n\r\nexport class ProcessFractalResults implements WorkerMessage {\r\n  type = WorkerMessageType.ProcessFractalResults;\r\n\r\n  constructor(public computedPoints: ComputedPoint[]) { }\r\n}\r\n","export enum WorkerMessageType {\r\n  ProcessFractalStart,\r\n  ProcessFractalResults,\r\n  ProcessFractalDone,\r\n}\r\n","import { Point } from './point';\r\n\r\nexport class ComputedPoint {\r\n\r\n  constructor(\r\n    public point: Point,\r\n    public value: number,\r\n  ) { }\r\n}\r\n","import { Point } from './point';\r\n\r\n// This is used for coordinates (decimal numbers)\r\nexport class Coordinate {\r\n\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n  ) { }\r\n\r\n  computeTopLeftCoordinate(dimensions: Point, increment: number): Coordinate {\r\n    return new Coordinate(\r\n      this.x - (increment * dimensions.x / 2),\r\n      this.y - (increment * dimensions.y / 2)\r\n    );\r\n  }\r\n\r\n  clone(): Coordinate {\r\n    return new Coordinate(this.x, this.y);\r\n  }\r\n}\r\n","import { Coordinate } from './coordinate';\r\n\r\n// This is used for x, y points (whole numbers)\r\nexport class Point {\r\n\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n  ) { }\r\n\r\n  toCoordinate(topLeftCoord: Coordinate, increment: number): Coordinate {\r\n    return new Coordinate(\r\n      topLeftCoord.x + (increment * this.x),\r\n      topLeftCoord.y + (increment * this.y),\r\n    );\r\n  }\r\n}\r\n","import { AppWorkers } from './app-workers/app.workers';\r\n\r\nexport const worker = new AppWorkers(self);\r\naddEventListener('message', ($event: MessageEvent) => {\r\n  worker.workerBroker($event);\r\n});\r\n"],"sourceRoot":""}